import { getCollection } from "astro:content";

// 統一的文章類型介面
export interface UnifiedArticle {
  id: string;
  data: {
    title: string;
    tags?: string[];
    description?: string;
    area?: string; // travel 專用
    difficulty?: string; // travel 專用
    date?: Date;
  };
  body: string;
  slug: string;
  collection: "blog" | "notes" | "travel";
  filePath: string;
}

// 獲取所有文章的函數
export async function getAllArticles(): Promise<UnifiedArticle[]> {
  const [blogPosts, notes, travelPosts] = await Promise.all([
    getCollection("blog"),
    getCollection("notes"),
    getCollection("travel"),
  ]);

  const allArticles: UnifiedArticle[] = [
    ...blogPosts.map((post) => ({
      id: post.id,
      data: {
        title: post.data.title,
        tags: post.data.tags,
        description: post.data.description,
        date: post.data.date,
      },
      body: post.body,
      slug: post.slug,
      collection: "blog" as const,
      filePath: post.id,
    })),
    ...notes.map((note) => ({
      id: note.id,
      data: {
        title: note.data.title,
        tags: note.data.tags,
        description: note.data.description,
        date: note.data.date,
      },
      body: note.body,
      slug: note.slug,
      collection: "notes" as const,
      filePath: note.id,
    })),
    ...travelPosts.map((travel) => ({
      id: travel.id,
      data: {
        title: travel.data.title,
        tags: travel.data.tags,
        description: travel.data.description,
        area: travel.data.area,
        difficulty: travel.data.difficulty,
        date: travel.data.date,
      },
      body: travel.body,
      slug: travel.slug,
      collection: "travel" as const,
      filePath: travel.id,
    })),
  ];

  return allArticles;
}

// 保持現有的 mockArticles 作為備用（如果需要靜態數據）
export const mockArticles = [
  {
    id: "2025-01-20-first-blog-post.md",
    data: {
      title: "CMS 採坑紀錄",
      tags: ["hola", "docusaurus"],
    },
    body: "## 動機\n\n最近因為要幫公司的網站換新版，所以就開始研究了一下目前比較流行的 CMS 系統，並且找到了一些比較有名的 Headless CMS 系統，這篇文章就是來記錄一下我們的採坑過程。\n\n<!--truncate -->\n\n## 目錄\n\n- [什麼是 Headless CMS？與 Restful API 的差別？](#什麼是-headless-cms與-restful-api-的差別)\n  - [Case 1：Strapi](#case-1strapi)\n  - [Case 2：Contentful](#case-2contentful)\n  - [Case 3：Payload CMS](#case-3payload-cms)\n- [結論](#結論)\n\n## 什麼是 Headless CMS？與 Restful API 的差別？\n\n### Case 1：Strapi\n\n### Case 2：Contentful\n\n### Case 3：Payload CMS\n\n## 結論\n\n最後還是回到 docusaurus",
    filePath: "src/content/blog/2025-01-20-first-blog-post.md",
    digest: "9c8030a02f6506a2",
    rendered: {
      html: '<h2 id="動機">動機</h2>\n<p>最近因為要幫公司的網站換新版，所以就開始研究了一下目前比較流行的 CMS 系統，並且找到了一些比較有名的 Headless CMS 系統，這篇文章就是來記錄一下我們的採坑過程。</p>\n<!--truncate -->\n<h2 id="目錄">目錄</h2>\n<ul>\n<li><a href="#%E4%BB%80%E9%BA%BC%E6%98%AF-headless-cms%E8%88%87-restful-api-%E7%9A%84%E5%B7%AE%E5%88%A5">什麼是 Headless CMS？與 Restful API 的差別？</a>\n<ul>\n<li><a href="#case-1strapi">Case 1：Strapi</a></li>\n<li><a href="#case-2contentful">Case 2：Contentful</a></li>\n<li><a href="#case-3payload-cms">Case 3：Payload CMS</a></li>\n</ul>\n</li>\n<li><a href="#%E7%B5%90%E8%AB%96">結論</a></li>\n</ul>\n<h2 id="什麼是-headless-cms與-restful-api-的差別">什麼是 Headless CMS？與 Restful API 的差別？</h2>\n<h3 id="case-1strapi">Case 1：Strapi</h3>\n<h3 id="case-2contentful">Case 2：Contentful</h3>\n<h3 id="case-3payload-cms">Case 3：Payload CMS</h3>\n<h2 id="結論">結論</h2>\n<p>最後還是回到 docusaurus</p>',
      metadata: {
        headings: [
          {
            depth: 2,
            slug: "動機",
            text: "動機",
          },
          {
            depth: 2,
            slug: "目錄",
            text: "目錄",
          },
          {
            depth: 2,
            slug: "什麼是-headless-cms與-restful-api-的差別",
            text: "什麼是 Headless CMS？與 Restful API 的差別？",
          },
          {
            depth: 3,
            slug: "case-1strapi",
            text: "Case 1：Strapi",
          },
          {
            depth: 3,
            slug: "case-2contentful",
            text: "Case 2：Contentful",
          },
          {
            depth: 3,
            slug: "case-3payload-cms",
            text: "Case 3：Payload CMS",
          },
          {
            depth: 2,
            slug: "結論",
            text: "結論",
          },
        ],
        localImagePaths: [],
        remoteImagePaths: [],
        frontmatter: {
          slug: "headless-cms",
          title: "CMS 採坑紀錄",
          tags: ["hola", "docusaurus"],
        },
        imagePaths: [],
      },
    },
    collection: "blog",
    slug: "headless-cms",
  },
  {
    id: "2025-03-16-write-note-for-yourself.md",
    data: {
      title: "【週間札記】為自己寫開發文件",
      tags: ["prd"],
    },
    body: "## 前言\n\n在某次會議討論完之後，各種渺然的需求不斷的被拋出來，腦袋也是一片茫然。不是說在技術上做不到，而是對於整個產品、邊界在哪沒有清楚的想像。於是會議之後，我敲了同事一輪：\n\n「你知道剛剛 OO 說的意思是什麼麻？」\n「不確定噎，有些可能在技術上不可行。」\n\n問過了所有同事一輪，大家都沒有共識的想法，開發的方向上總是在撞牆，於是乎我也找到問題的方向了——我需要為自己寫一份開發文件。但問題是怎麼說才說得清楚？同時對開發又有幫助呢？\n\n<!-- truncate-->\n\n## 問問 AI？\n\n一開始曾經有試過將自己手邊整理的筆記，請 ChatGPT、[ChatPRD](https://www.chatprd.ai) 等幫忙整理成開發文件，但總覺得怎麼嘗試 promt，總有一種說不出來的奇怪感：\n\n![ask ai prd](/img/notes/ask-ai-prd.png)\n\n> ChatGPT：https://chatgpt.com/canvas/shared/67d6af74464c8191b44d33510ceb21f4\n\n1. **技術選擇**：雖然整理了一份文件，但是對於規劃真實的開發情境還是有些落差。但是基於什麼樣的原因做技術選擇、時程安排、需求分析等等，似乎無法真正的說出來。甚至是應用在比較複雜、或是比較模糊的需求，也無法做出比較務實的規劃。\n\n2. **協作/可編輯性**：以 AI 來說，似乎一次的對話產出就結束了，但以真實的開發需求來說，可能每週、每個月都在調整改變，甚至在比較大的公司來說，還需要顧慮到不同的部門如何看待這個專案。以預設的格式來說，看不太到這份文件可以協作的地方，同時比較難在未來擴充、整合。\n\n評估過這些考量之後，或許工程師可以鬆一口氣了（？）。針對特定領域的 Domain Knowledge ，還是要依靠對於專案/領域的了解，包含需要將更為複雜的組織、需求等考慮進去，才能真正寫出一份能夠派上用場的開發文件。\n\n當發現 AI 派不太上用場，因此開始去思考，其他公司是如何寫開發文件的。\n\n## PRD Template\n\n或許是被演算法發現我最近想寫 PRD ，因此無意間刷到了這篇文章 [12x Real PRD Examples | Best PRD Templates](https://www.hustlebadger.com/what-do-product-teams-do/prd-template-examples/)，看完一輪文件之後發現還是 [kevinyien: PRD Template](https://docs.google.com/document/d/1mEMDcHmtQ6twzNlpvF-9maNlAcezpWDtCnyIqWkODZs/edit?tab=t.0#heading=h.7ueoyja6ijay) 比較對得上眼。\n\n簡單來說這份文件的 PRD 的架構是這樣的:\n\n![prd](/img/notes/kevinyien-prd.png)\n\n- 問題定義：\n  - 為什麼我們要開發這個產品？商業背景是什麼？\n  - 哪些是優先目標？非優先目標？\n- 專案架構：\n  - 整個專案的 User Story 是什麼？\n- 里程碑：\n  - 預計的時間規劃是？\n  - 預期的階段性驗收/檢核標準是？\n- 附件：\n  - 過去遇過了哪些問題？解決的方式是？\n\n同時我也很喜歡這份文件為主要的方向提出了一個大塊架，沒有愛多的規範限制，甚至需要使用哪種表格、圖表等等，就看個人及團隊的習慣了。同時這份文件也很在乎是否把『需求溝通』給說清楚，在大家的理解不一致時，那麼更需要做的是需要慢下來，把需求溝通清楚，然後才是開始寫程式碼。\n\n## 下一步：劃出功能邊界\n\n> 在某次的活動中，和其他廠商的工程師聊到。一個產品能夠成功推出有很多原因，我們很大一部分的工作是要把功能的邊界畫出來，我們能做什麼、哪些不能做、擴充性講清楚，接著才開始開發。\n\n以網頁的前端來說，由於 CORS、及瀏覽器安全性的限制，我們無法直接存取 File System 的資料（試想如果今天你進入了 `google.com`，但是 Google 可以存取到放在個人電腦的金鑰，這不是很可怕嗎）。但是以後端、Android 來說，可以透過如 `node:fs`、`java.io.File` 等等來操作文件系統。如果今天的使用情境是在離線的情境，那麼 React 可能就不是最佳解。\n\n另一個例子是，今天客戶想要針對 OsmAnd 寫一些擴充套件，但哪些是開發者能做到的？那就要去研究 [OsmAnd API & SDK 文檔](https://osmand.net/docs/technical/osmand-api-sdk/)、或是可以與哪些 Android 原生的 API 互動，甚至是評估效能。\n\n在每個階段的評估、實作之後，習慣上我會將這些技術比較整合成一個文件，作為階段性的目標、及未來參考的依據。承接 PRD 上面里程碑的概念，在啃完技術文件之後，也才能決定哪些時候可以辦到哪些事情。而開發的週期，就像是定期的在界定邊界、評估、擴展等等。\n\n## 未來：整合不同文件\n\n> 上禮拜參加 GDG Taipei 的活動，聽到一句很深刻的話：『在 AI 的世界裡，比起去在意我們什麼時候會被 AI 取代，更重要的是我們該如何利用 AI 來精進我們的工作流』。\n\n以一個團隊來說，不同角色習慣的文件管理模式可能是不同的：\n\n- PM：使用 Google Drive、Doc、訪談資料\n- 工程師：使用 GitHub、Bitbucket 及在 README 整理文件紀錄\n\n...\n\n當 PRD 可以將不同角色的目標聚焦在一起時，或許下一步可以思考如何將文件整合進團隊的工作流。像是透過語音辨識、搭配離線部署的服務等，來自動化整合文件的內容，或許也是我想嘗試的目標。\n\n## 小結\n\n前幾天臨時要去維護一份前幾個月寫過的專案時，其實還滿慶幸自己平常有好好寫文件的習慣，不然真的會忘記怎麼打開專案。寫文件也是多了一次的輸出，在軟體開發如此快速的環境中，讓自己有一份反思、回顧。同時對於團隊來說，更是用來減少誤會、統整共同的目標。\n\n~至於平時不寫文件、也不看文件的人，你需要靠的是通靈師，而不是工程師。~\n\n最近也在透過練習，來讓自己對於產品、開發流程有更多的掌握度，也在探索什麼是比較適合自己的文件格式。或許有很多混亂的開發環境，不過這一次就幫自己留下文件吧。\n\n## 參考資料\n\n1. [寫 PRD，不用糾結 MRD、BRD ｜ PRD 文件才是產品經理的核心任務](https://pagerank.ing/prd/)\n2. [kevinyien: PRD Template](https://docs.google.com/document/d/1mEMDcHmtQ6twzNlpvF-9maNlAcezpWDtCnyIqWkODZs/edit?tab=t.0#heading=h.7ueoyja6ijay)\n3. [12x Real PRD Examples | Best PRD Templates](https://www.hustlebadger.com/what-do-product-teams-do/prd-template-examples/)",
    filePath: "src/content/blog/2025-03-16-write-note-for-yourself.md",
    digest: "ea1aedeabb6b342e",
    rendered: {
      html: '<h2 id="前言">前言</h2>\n<p>在某次會議討論完之後，各種渺然的需求不斷的被拋出來，腦袋也是一片茫然。不是說在技術上做不到，而是對於整個產品、邊界在哪沒有清楚的想像。於是會議之後，我敲了同事一輪：</p>\n<p>「你知道剛剛 OO 說的意思是什麼麻？」\n「不確定噎，有些可能在技術上不可行。」</p>\n<p>問過了所有同事一輪，大家都沒有共識的想法，開發的方向上總是在撞牆，於是乎我也找到問題的方向了——我需要為自己寫一份開發文件。但問題是怎麼說才說得清楚？同時對開發又有幫助呢？</p>\n<!-- truncate-->\n<h2 id="問問-ai">問問 AI？</h2>\n<p>一開始曾經有試過將自己手邊整理的筆記，請 ChatGPT、<a href="https://www.chatprd.ai">ChatPRD</a> 等幫忙整理成開發文件，但總覺得怎麼嘗試 promt，總有一種說不出來的奇怪感：</p>\n<p><img src="/img/notes/ask-ai-prd.png" alt="ask ai prd"></p>\n<blockquote>\n<p>ChatGPT：<a href="https://chatgpt.com/canvas/shared/67d6af74464c8191b44d33510ceb21f4">https://chatgpt.com/canvas/shared/67d6af74464c8191b44d33510ceb21f4</a></p>\n</blockquote>\n<ol>\n<li>\n<p><strong>技術選擇</strong>：雖然整理了一份文件，但是對於規劃真實的開發情境還是有些落差。但是基於什麼樣的原因做技術選擇、時程安排、需求分析等等，似乎無法真正的說出來。甚至是應用在比較複雜、或是比較模糊的需求，也無法做出比較務實的規劃。</p>\n</li>\n<li>\n<p><strong>協作/可編輯性</strong>：以 AI 來說，似乎一次的對話產出就結束了，但以真實的開發需求來說，可能每週、每個月都在調整改變，甚至在比較大的公司來說，還需要顧慮到不同的部門如何看待這個專案。以預設的格式來說，看不太到這份文件可以協作的地方，同時比較難在未來擴充、整合。</p>\n</li>\n</ol>\n<p>評估過這些考量之後，或許工程師可以鬆一口氣了（？）。針對特定領域的 Domain Knowledge ，還是要依靠對於專案/領域的了解，包含需要將更為複雜的組織、需求等考慮進去，才能真正寫出一份能夠派上用場的開發文件。</p>\n<p>當發現 AI 派不太上用場，因此開始去思考，其他公司是如何寫開發文件的。</p>\n<h2 id="prd-template">PRD Template</h2>\n<p>或許是被演算法發現我最近想寫 PRD ，因此無意間刷到了這篇文章 <a href="https://www.hustlebadger.com/what-do-product-teams-do/prd-template-examples/">12x Real PRD Examples | Best PRD Templates</a>，看完一輪文件之後發現還是 <a href="https://docs.google.com/document/d/1mEMDcHmtQ6twzNlpvF-9maNlAcezpWDtCnyIqWkODZs/edit?tab=t.0#heading=h.7ueoyja6ijay">kevinyien: PRD Template</a> 比較對得上眼。</p>\n<p>簡單來說這份文件的 PRD 的架構是這樣的:</p>\n<p><img src="/img/notes/kevinyien-prd.png" alt="prd"></p>\n<ul>\n<li>問題定義：\n<ul>\n<li>為什麼我們要開發這個產品？商業背景是什麼？</li>\n<li>哪些是優先目標？非優先目標？</li>\n</ul>\n</li>\n<li>專案架構：\n<ul>\n<li>整個專案的 User Story 是什麼？</li>\n</ul>\n</li>\n<li>里程碑：\n<ul>\n<li>預計的時間規劃是？</li>\n<li>預期的階段性驗收/檢核標準是？</li>\n</ul>\n</li>\n<li>附件：\n<ul>\n<li>過去遇過了哪些問題？解決的方式是？</li>\n</ul>\n</li>\n</ul>\n<p>同時我也很喜歡這份文件為主要的方向提出了一個大塊架，沒有愛多的規範限制，甚至需要使用哪種表格、圖表等等，就看個人及團隊的習慣了。同時這份文件也很在乎是否把『需求溝通』給說清楚，在大家的理解不一致時，那麼更需要做的是需要慢下來，把需求溝通清楚，然後才是開始寫程式碼。</p>\n<h2 id="下一步劃出功能邊界">下一步：劃出功能邊界</h2>\n<blockquote>\n<p>在某次的活動中，和其他廠商的工程師聊到。一個產品能夠成功推出有很多原因，我們很大一部分的工作是要把功能的邊界畫出來，我們能做什麼、哪些不能做、擴充性講清楚，接著才開始開發。</p>\n</blockquote>\n<p>以網頁的前端來說，由於 CORS、及瀏覽器安全性的限制，我們無法直接存取 File System 的資料（試想如果今天你進入了 <code>google.com</code>，但是 Google 可以存取到放在個人電腦的金鑰，這不是很可怕嗎）。但是以後端、Android 來說，可以透過如 <code>node:fs</code>、<code>java.io.File</code> 等等來操作文件系統。如果今天的使用情境是在離線的情境，那麼 React 可能就不是最佳解。</p>\n<p>另一個例子是，今天客戶想要針對 OsmAnd 寫一些擴充套件，但哪些是開發者能做到的？那就要去研究 <a href="https://osmand.net/docs/technical/osmand-api-sdk/">OsmAnd API &#x26; SDK 文檔</a>、或是可以與哪些 Android 原生的 API 互動，甚至是評估效能。</p>\n<p>在每個階段的評估、實作之後，習慣上我會將這些技術比較整合成一個文件，作為階段性的目標、及未來參考的依據。承接 PRD 上面里程碑的概念，在啃完技術文件之後，也才能決定哪些時候可以辦到哪些事情。而開發的週期，就像是定期的在界定邊界、評估、擴展等等。</p>\n<h2 id="未來整合不同文件">未來：整合不同文件</h2>\n<blockquote>\n<p>上禮拜參加 GDG Taipei 的活動，聽到一句很深刻的話：『在 AI 的世界裡，比起去在意我們什麼時候會被 AI 取代，更重要的是我們該如何利用 AI 來精進我們的工作流』。</p>\n</blockquote>\n<p>以一個團隊來說，不同角色習慣的文件管理模式可能是不同的：</p>\n<ul>\n<li>PM：使用 Google Drive、Doc、訪談資料</li>\n<li>工程師：使用 GitHub、Bitbucket 及在 README 整理文件紀錄</li>\n</ul>\n<p>…</p>\n<p>當 PRD 可以將不同角色的目標聚焦在一起時，或許下一步可以思考如何將文件整合進團隊的工作流。像是透過語音辨識、搭配離線部署的服務等，來自動化整合文件的內容，或許也是我想嘗試的目標。</p>\n<h2 id="小結">小結</h2>\n<p>前幾天臨時要去維護一份前幾個月寫過的專案時，其實還滿慶幸自己平常有好好寫文件的習慣，不然真的會忘記怎麼打開專案。寫文件也是多了一次的輸出，在軟體開發如此快速的環境中，讓自己有一份反思、回顧。同時對於團隊來說，更是用來減少誤會、統整共同的目標。</p>\n<p><del>至於平時不寫文件、也不看文件的人，你需要靠的是通靈師，而不是工程師。</del></p>\n<p>最近也在透過練習，來讓自己對於產品、開發流程有更多的掌握度，也在探索什麼是比較適合自己的文件格式。或許有很多混亂的開發環境，不過這一次就幫自己留下文件吧。</p>\n<h2 id="參考資料">參考資料</h2>\n<ol>\n<li><a href="https://pagerank.ing/prd/">寫 PRD，不用糾結 MRD、BRD ｜ PRD 文件才是產品經理的核心任務</a></li>\n<li><a href="https://docs.google.com/document/d/1mEMDcHmtQ6twzNlpvF-9maNlAcezpWDtCnyIqWkODZs/edit?tab=t.0#heading=h.7ueoyja6ijay">kevinyien: PRD Template</a></li>\n<li><a href="https://www.hustlebadger.com/what-do-product-teams-do/prd-template-examples/">12x Real PRD Examples | Best PRD Templates</a></li>\n</ol>',
      metadata: {
        headings: [
          {
            depth: 2,
            slug: "前言",
            text: "前言",
          },
          {
            depth: 2,
            slug: "問問-ai",
            text: "問問 AI？",
          },
          {
            depth: 2,
            slug: "prd-template",
            text: "PRD Template",
          },
          {
            depth: 2,
            slug: "下一步劃出功能邊界",
            text: "下一步：劃出功能邊界",
          },
          {
            depth: 2,
            slug: "未來整合不同文件",
            text: "未來：整合不同文件",
          },
          {
            depth: 2,
            slug: "小結",
            text: "小結",
          },
          {
            depth: 2,
            slug: "參考資料",
            text: "參考資料",
          },
        ],
        localImagePaths: [],
        remoteImagePaths: [],
        frontmatter: {
          slug: "write-note-for-yourself",
          title: "【週間札記】為自己寫開發文件",
          tags: ["prd"],
        },
        imagePaths: [],
      },
    },
    collection: "blog",
    slug: "write-note-for-yourself",
  },
  {
    id: "2025-02-19-first-try-android.md",
    data: {
      title: "Android 採坑紀錄",
      tags: ["Android", "Kotlin"],
    },
    body: "## 動機\n\n近期因為專案的需求，需要跨平台去寫一個 Android 的套件，對我來說是第一次跨 Javascript 到其他環境開發，這篇文章想簡單記錄從 0 經驗的採坑過程。\n\n<!--truncate -->\n\n## 目錄\n\n## 要解決的問題\n\n- 這個是目前既有的 APP ，目前需要做的是針對右邊的 plugin 寫一個 UI。\n- 這個 UI 能夠與例如 `com.example.plugin.maps.Marker` 同時也能夠使用 Android API、呼叫 RESTful API。\n- 既有的範本只有很舊的 Java + XML，同時沒有完整的技術文件。\n\n## First Try：Kotlin + Jetpack Compose\n\n> 由於一開始光是拆開整個 純 Java + XML 的結構檔，整個人就看到頭昏眼花，加上引用方式、語法跟 React 天差地遠，因此選擇了 Android Studio 的範本，大概花了一個下午的時間起了一個基礎的 RESTful API + Layout 的專案。\n\n![image](/img/notes/kotlin/kotlin-compose-styling-example.png)\n\n:::note\n\n1. 如何切出一個 UI 物件？ `Jetpack Compose`、`Material 3`、`xml檔`\n2. 如何為物件寫 style、layout？ `Modifier`、`theme`、`xml檔`\n3. 如何為物件設定狀態、資料流、Handle 使用者的 OnClick 事件？ `Jetpack Compose`、`MVVM`\n4. 如何串接 API，並完成 RESTful 的邏輯？\n5. 如何把 release、debug 推到使用者/測試機上？\n\n:::\n\n### Oh No 是環境建置錯誤：Gradle 與 Build Error!!\n\n剛開始使用 Android Studio 的時候，發現每次都會透過 Gradle 來建立好編譯的環境，然後才開始開發。\n\n## 下一步：開發目前既有的專案\n\n**Kotlin**\n\n- 相較於 Java 語法較為簡潔、比較貼近 Typescript，可以在支援 Java 的同時，也能比較快上手語言的邏輯。\n- 當代的 Android 開發者、教材已經很多用 Kotlin 了，所以會比較好找到資源\n\n```kotlin\n\nclass MainActivity: AppCompatActivity() {\n\n  private lateinit var binding: ActivityMainBinding\n  private val viewModel: MainViewModel by viewModels()\n\n  fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(saveInstanceState)\n\n        // data binding\n        binding = LoginLayoutBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        // set view model\n        // Connect ViewModel to the binding\n        binding.viewModel = viewModel\n        binding.lifecycleOwner = this\n  }\n}\n\n```\n\n## 結語\n\n> 對於工程師來說，最重要的價值是什麼？\n\n在 AI 出現之後，我也一直在思考這個問題。『與其去追求一直在變的技術，CP 值最高的還是去學習語言的底層邏輯、設計模式』，之前總是從比較有經驗的工程師聽到這句話，但當時不太懂這句話的涵義。\n\n## 參考資料\n\n1. [【Medium】Android 四大組件 — Service 介紹](https://medium.com/@volume98910107/android四大組件-service介紹-f5620a376ba)\n2. [【Google】Android 基本概念：使用 Compose](https://developer.android.com/courses/android-basics-compose/course?hl=zh-tw)\n3. [【Google】現代化 Android 應用程式的架構](https://developer.android.com/courses/pathways/android-architecture?hl=zh-tw)\n4. [【Medium】How to migrate Kotlin DSL](https://medium.com/工程師求生指南-sofware-engineer-survival-guide/how-to-migrate-kotlin-dsl-b857c153526d)",
    filePath: "src/content/blog/2025-02-19-first-try-android.md",
    digest: "b141bf1e7daef020",
    rendered: {
      html: '<h2 id="動機">動機</h2>\n<p>近期因為專案的需求，需要跨平台去寫一個 Android 的套件，對我來說是第一次跨 Javascript 到其他環境開發，這篇文章想簡單記錄從 0 經驗的採坑過程。</p>\n<!--truncate -->\n<h2 id="目錄">目錄</h2>\n<h2 id="要解決的問題">要解決的問題</h2>\n<ul>\n<li>這個是目前既有的 APP ，目前需要做的是針對右邊的 plugin 寫一個 UI。</li>\n<li>這個 UI 能夠與例如 <code>com.example.plugin.maps.Marker</code> 同時也能夠使用 Android API、呼叫 RESTful API。</li>\n<li>既有的範本只有很舊的 Java + XML，同時沒有完整的技術文件。</li>\n</ul>\n<h2 id="first-trykotlin--jetpack-compose">First Try：Kotlin + Jetpack Compose</h2>\n<blockquote>\n<p>由於一開始光是拆開整個 純 Java + XML 的結構檔，整個人就看到頭昏眼花，加上引用方式、語法跟 React 天差地遠，因此選擇了 Android Studio 的範本，大概花了一個下午的時間起了一個基礎的 RESTful API + Layout 的專案。</p>\n</blockquote>\n<p><img src="/img/notes/kotlin/kotlin-compose-styling-example.png" alt="image"></p>\n<div><ol>\n<li>如何切出一個 UI 物件？ <code>Jetpack Compose</code>、<code>Material 3</code>、<code>xml檔</code></li>\n<li>如何為物件寫 style、layout？ <code>Modifier</code>、<code>theme</code>、<code>xml檔</code></li>\n<li>如何為物件設定狀態、資料流、Handle 使用者的 OnClick 事件？ <code>Jetpack Compose</code>、<code>MVVM</code></li>\n<li>如何串接 API，並完成 RESTful 的邏輯？</li>\n<li>如何把 release、debug 推到使用者/測試機上？</li>\n</ol></div>\n<h3 id="oh-no-是環境建置錯誤gradle-與-build-error">Oh No 是環境建置錯誤：Gradle 與 Build Error!!</h3>\n<p>剛開始使用 Android Studio 的時候，發現每次都會透過 Gradle 來建立好編譯的環境，然後才開始開發。</p>\n<h2 id="下一步開發目前既有的專案">下一步：開發目前既有的專案</h2>\n<p><strong>Kotlin</strong></p>\n<ul>\n<li>相較於 Java 語法較為簡潔、比較貼近 Typescript，可以在支援 Java 的同時，也能比較快上手語言的邏輯。</li>\n<li>當代的 Android 開發者、教材已經很多用 Kotlin 了，所以會比較好找到資源</li>\n</ul>\n<div class="expressive-code"><link rel="stylesheet" href="/assets/ec.v4551.css"><script type="module" src="/assets/ec.p1z7b.js"></script><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="kotlin"><code><div class="ec-line"><div class="code"><span style="--0:#C792EA;--1:#8844AE">class</span><span style="--0:#D6DEEB;--1:#403F53"> MainActivity: AppCompatActivity() {</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span class="indent">  </span><span style="--0:#C792EA;--1:#8844AE">private</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C792EA;--1:#8844AE">lateinit</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C792EA;--1:#8844AE">var</span><span style="--0:#D6DEEB;--1:#403F53"> binding: ActivityMainBinding</span></div></div><div class="ec-line"><div class="code"><span class="indent">  </span><span style="--0:#C792EA;--1:#8844AE">private</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#C792EA;--1:#8844AE">val</span><span style="--0:#D6DEEB;--1:#403F53"> viewModel: MainViewModel by viewModels()</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span class="indent">  </span><span style="--0:#C792EA;--1:#8844AE">fun</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#82AAFF;--1:#3B61B0">onCreate</span><span style="--0:#D6DEEB;--1:#403F53">(savedInstanceState: Bundle?) {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">super</span><span style="--0:#D6DEEB;--1:#403F53">.</span><span style="--0:#82AAFF;--1:#3B61B0">onCreate</span><span style="--0:#D6DEEB;--1:#403F53">(saveInstanceState)</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#919F9F;--1:#5D6376">// data binding</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">binding </span><span style="--0:#C792EA;--1:#8844AE">=</span><span style="--0:#D6DEEB;--1:#403F53"> LoginLayoutBinding.</span><span style="--0:#82AAFF;--1:#3B61B0">inflate</span><span style="--0:#D6DEEB;--1:#403F53">(layoutInflater)</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#82AAFF;--1:#3B61B0">setContentView</span><span style="--0:#D6DEEB;--1:#403F53">(binding.root)</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#919F9F;--1:#5D6376">// set view model</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#919F9F;--1:#5D6376">// Connect ViewModel to the binding</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">binding.viewModel </span><span style="--0:#C792EA;--1:#8844AE">=</span><span style="--0:#D6DEEB;--1:#403F53"> viewModel</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">binding.lifecycleOwner </span><span style="--0:#C792EA;--1:#8844AE">=</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#7FDBCA;--1:#096E72">this</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="class MainActivity: AppCompatActivity() {  private lateinit var binding: ActivityMainBinding  private val viewModel: MainViewModel by viewModels()  fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(saveInstanceState)        // data binding        binding = LoginLayoutBinding.inflate(layoutInflater)        setContentView(binding.root)        // set view model        // Connect ViewModel to the binding        binding.viewModel = viewModel        binding.lifecycleOwner = this  }}"><div></div></button></div></figure></div>\n<h2 id="結語">結語</h2>\n<blockquote>\n<p>對於工程師來說，最重要的價值是什麼？</p>\n</blockquote>\n<p>在 AI 出現之後，我也一直在思考這個問題。『與其去追求一直在變的技術，CP 值最高的還是去學習語言的底層邏輯、設計模式』，之前總是從比較有經驗的工程師聽到這句話，但當時不太懂這句話的涵義。</p>\n<h2 id="參考資料">參考資料</h2>\n<ol>\n<li><a href="https://medium.com/@volume98910107/android%E5%9B%9B%E5%A4%A7%E7%B5%84%E4%BB%B6-service%E4%BB%8B%E7%B4%B9-f5620a376ba">【Medium】Android 四大組件 — Service 介紹</a></li>\n<li><a href="https://developer.android.com/courses/android-basics-compose/course?hl=zh-tw">【Google】Android 基本概念：使用 Compose</a></li>\n<li><a href="https://developer.android.com/courses/pathways/android-architecture?hl=zh-tw">【Google】現代化 Android 應用程式的架構</a></li>\n<li><a href="https://medium.com/%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E7%94%9F%E6%8C%87%E5%8D%97-sofware-engineer-survival-guide/how-to-migrate-kotlin-dsl-b857c153526d">【Medium】How to migrate Kotlin DSL</a></li>\n</ol>',
      metadata: {
        headings: [
          {
            depth: 2,
            slug: "動機",
            text: "動機",
          },
          {
            depth: 2,
            slug: "目錄",
            text: "目錄",
          },
          {
            depth: 2,
            slug: "要解決的問題",
            text: "要解決的問題",
          },
          {
            depth: 2,
            slug: "first-trykotlin--jetpack-compose",
            text: "First Try：Kotlin + Jetpack Compose",
          },
          {
            depth: 3,
            slug: "oh-no-是環境建置錯誤gradle-與-build-error",
            text: "Oh No 是環境建置錯誤：Gradle 與 Build Error!!",
          },
          {
            depth: 2,
            slug: "下一步開發目前既有的專案",
            text: "下一步：開發目前既有的專案",
          },
          {
            depth: 2,
            slug: "結語",
            text: "結語",
          },
          {
            depth: 2,
            slug: "參考資料",
            text: "參考資料",
          },
        ],
        localImagePaths: [],
        remoteImagePaths: [],
        frontmatter: {
          slug: "first-try-android",
          title: "Android 採坑紀錄",
          tags: ["Android", "Kotlin"],
        },
        imagePaths: [],
      },
    },
    collection: "blog",
    slug: "first-try-android",
  },
  {
    id: "2025-07-01-astro-blog.md",
    data: {
      title: "Astro 建置部落格",
      tags: ["astro", "blog"],
    },
    body: "## 動機\n\n最近因為要幫公司的網站換新版，所以就開始研究了一下目前比較流行的 CMS 系統，並且找到了一些比較有名的 Headless CMS 系統，這篇文章就是來記錄一下我們的採坑過程。\n\n<!--truncate -->\n\n## 專案動機\n\n```plaintext\n- [] 好看的現代化 UI、同時讓 RD 保有『改得動』的空間\n- [] 透過 `markdown` 撰寫文章，並支援 `mermaid`、`PlantUML` 繪製流程圖\n```\n\n基於最近寫文件、簡報的風格，都是透過 `markdown` 來記錄，同時透過 IDE 的 `mermaid`、`PlantUML` 等套件來快速預覽架構圖。但是鑑於過去的文章都是放在 Docusaurus 上，但是 UI 的美觀又不盡理想，因此打算花些時間重構個人網站。\n\n### Docusaurus\n\n> 過去也曾經使用過 Docusaurus 來撰寫文件，但是 UI 的美觀又不盡理想，因此打算花些時間重構個人網站。\n\n### Next.js\n\n> 過去也曾經使用過 Next.js 基於 `markdown` 撰寫文章，但是 Next.js 需要額外準備 `markdown` 的解析器、額外解析 `header` 標籤，同時需要安裝很多依賴，同時會碰到很多非預期的 Hydration 問題，對於需求來說感覺還是『太重了』。\n\n例如[官方文件](https://nextjs.org/docs/app/guides/mdx)提到：\n\n```bash\nnpm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx\n```\n\n## Relume.io\n\n## 什麼是 Hydration？\n\n## Astro vs Next.js",
    filePath: "src/content/blog/2025-07-01-astro-blog.md",
    digest: "0c6ff9820ef14c79",
    rendered: {
      html: '<h2 id="動機">動機</h2>\n<p>最近因為要幫公司的網站換新版，所以就開始研究了一下目前比較流行的 CMS 系統，並且找到了一些比較有名的 Headless CMS 系統，這篇文章就是來記錄一下我們的採坑過程。</p>\n<!--truncate -->\n<h2 id="專案動機">專案動機</h2>\n<div class="expressive-code"><link rel="stylesheet" href="/assets/ec.v4551.css"><script type="module" src="/assets/ec.p1z7b.js"></script><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="plaintext"><code><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">- [] 好看的現代化 UI、同時讓 RD 保有『改得動』的空間</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">- [] 透過 `markdown` 撰寫文章，並支援 `mermaid`、`PlantUML` 繪製流程圖</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="- [] 好看的現代化 UI、同時讓 RD 保有『改得動』的空間- [] 透過 &#x60;markdown&#x60; 撰寫文章，並支援 &#x60;mermaid&#x60;、&#x60;PlantUML&#x60; 繪製流程圖"><div></div></button></div></figure></div>\n<p>基於最近寫文件、簡報的風格，都是透過 <code>markdown</code> 來記錄，同時透過 IDE 的 <code>mermaid</code>、<code>PlantUML</code> 等套件來快速預覽架構圖。但是鑑於過去的文章都是放在 Docusaurus 上，但是 UI 的美觀又不盡理想，因此打算花些時間重構個人網站。</p>\n<h3 id="docusaurus">Docusaurus</h3>\n<blockquote>\n<p>過去也曾經使用過 Docusaurus 來撰寫文件，但是 UI 的美觀又不盡理想，因此打算花些時間重構個人網站。</p>\n</blockquote>\n<h3 id="nextjs">Next.js</h3>\n<blockquote>\n<p>過去也曾經使用過 Next.js 基於 <code>markdown</code> 撰寫文章，但是 Next.js 需要額外準備 <code>markdown</code> 的解析器、額外解析 <code>header</code> 標籤，同時需要安裝很多依賴，同時會碰到很多非預期的 Hydration 問題，對於需求來說感覺還是『太重了』。</p>\n</blockquote>\n<p>例如<a href="https://nextjs.org/docs/app/guides/mdx">官方文件</a>提到：</p>\n<div class="expressive-code"><figure class="frame is-terminal not-content"><figcaption class="header"><span class="title"></span><span class="sr-only">Terminal window</span></figcaption><pre data-language="bash"><code><div class="ec-line"><div class="code"><span style="--0:#82AAFF;--1:#3B61B0">npm</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3B61B0">install</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3B61B0">@next/mdx</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3B61B0">@mdx-js/loader</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3B61B0">@mdx-js/react</span><span style="--0:#D6DEEB;--1:#403F53"> </span><span style="--0:#ECC48D;--1:#3B61B0">@types/mdx</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="npm install @next/mdx @mdx-js/loader @mdx-js/react @types/mdx"><div></div></button></div></figure></div>\n<h2 id="relumeio">Relume.io</h2>\n<h2 id="什麼是-hydration">什麼是 Hydration？</h2>\n<h2 id="astro-vs-nextjs">Astro vs Next.js</h2>',
      metadata: {
        headings: [
          {
            depth: 2,
            slug: "動機",
            text: "動機",
          },
          {
            depth: 2,
            slug: "專案動機",
            text: "專案動機",
          },
          {
            depth: 3,
            slug: "docusaurus",
            text: "Docusaurus",
          },
          {
            depth: 3,
            slug: "nextjs",
            text: "Next.js",
          },
          {
            depth: 2,
            slug: "relumeio",
            text: "Relume.io",
          },
          {
            depth: 2,
            slug: "什麼是-hydration",
            text: "什麼是 Hydration？",
          },
          {
            depth: 2,
            slug: "astro-vs-nextjs",
            text: "Astro vs Next.js",
          },
        ],
        localImagePaths: [],
        remoteImagePaths: [],
        frontmatter: {
          slug: "astro-blog",
          title: "Astro 建置部落格",
          tags: ["astro", "blog"],
        },
        imagePaths: [],
      },
    },
    collection: "blog",
    slug: "astro-blog",
  },
  {
    id: "2025-06-11-2025-recap.md",
    data: {
      title: "【週間札記】2025 上半年回顧",
    },
    body: '對於擔任前端工程師，算是剛邁入一年的時間。因此想要藉由這個空檔，回顧一下上半年的學習和工作。\n\n<!-- truncate -->\n\n## 目錄\n\n1. [技術概覽](#1-技術概覽)\n   - 1.1 [前端](#11-前端)\n   - 1.2 [後端](#12-後端)\n   - 1.3 [App](#13-app)\n   - 1.4 [DevOps](#14-devops)\n2. [寫好文件](#2-寫好文件)\n   - 2.1 [流程圖：Mermaid、PlantUML](#21-流程圖mermaidplantuml)\n   - 2.2 [Postman 文件](#22-postman-文件)\n   - 2.3 [MCP Tool：Task Master Claude](#23-mcp-tooltask-master-claude)\n3. [可以，但先讓我想想](#3-可以但先讓我想想)\n4. [通靈師](#4-通靈師)\n5. [學習](#5-學習)\n6. [小結](#6-小結)\n\n## 1. 技術概覽\n\n### 1.1 前端\n\n| 分類             | 說明                                                      |\n| ---------------- | --------------------------------------------------------- |\n| Framework        | Next.js, React + Vite, Astro                              |\n| UI Framework     | Tailwind CSS ,Radix UI, Shadcn UI ,Material UI            |\n| State Management | Redux, Zustand, Jotai, Tanstack Query, Context API        |\n| Headless CMS     | Strapi                                                    |\n| Map              | DeckGL, MapLibre GL                                       |\n| Other            | i18n-next, zod, Google Tag Manager, Web Recognization API |\n| 內部服務         | Outline, Docusaurus                                       |\n| Testing          | Playwright, Vitest                                        |\n\n### 1.2 後端\n\n> 有時候像是 Google Translate API 等 Token 適合藏在 Server，或是整個專案的業務邏輯 Google 不到，只有我會寫。因此在不考慮高併發的時候（要花點時間去規劃），會寫一些後端來給自己的前端串接，或是測試一些 MVP。\n\n| 分類             | 說明                                        |\n| ---------------- | ------------------------------------------- |\n| Framework        | Next.js (API Route), Express.js             |\n| ORM              | Prisma, Drizzle ORM                         |\n| API              | REST, GraphQL, Swagger UI, WebSocket        |\n| Database Service | Neon, Supabase, PostgreSQL, MySQL Workbench |\n| Map              | TileServerGL                                |\n| Other            | zod, jwt, MCP Server, docling               |\n\n### 1.3 App\n\n> 目前的主力還是放在 Web Frontend，不過前陣子因為要寫擴充套件的需求，開始學習一點 Kotlin，發現某些功能的寫法跟 React 很像。還有相較於 Web Vitals，Google Store 也有相對應的評分機制，這點也很有趣。\n\n> 🔗 [Introduction to Kotlin and Android Development](https://frontendmasters.com/courses/android-kotlin/)\n\n![App](/img/notes/kotlin/kotlin-compose-styling-example.png)\n\n| 分類  | 說明                                      |\n| ----- | ----------------------------------------- |\n| App   | Kotlin, kotlin coroutine, Jetpack Compose |\n| Other | Retrofit                                  |\n\n### 1.4 DevOps\n\n> 現在的公司，不知道是不是比較資深，每個工程師都會管自己的 VM，同時開發初期也需要自己寫 Dockerfile 或是管理 CI/CD 的流程，因此也花了一點時間學習如何處理環境的問題。不過好處是，有時候看到有趣的開源專案，可以很快的自己開一個 EC2 或是 Zeabur 下來玩。\n\n![DevOps](/img/blog/zeabur-deploy.png)\n\n| 分類                 | 說明                                              |\n| -------------------- | ------------------------------------------------- |\n| CI/CD                | Docker Compose, Gitlab CI                         |\n| VM                   | Ubuntu, VIM                                       |\n| Proxy                | Nginx Manager, Certbot                            |\n| Cloud Service/Bucket | AWS(EC2, S3), Cloudflare R2, Digital Ocean, Minio |\n| Domain               | Namecheap                                         |\n\n## 2. 寫好文件\n\n> 雖然很多人都說先決定公司，再跟著制度去學習，但就跟買菜一樣，很多事情是可遇不可求的，如果沒以這個環境怎麼辦？\n\n大概有好一陣子，團隊缺少專業的 PM，工程師要直接面對甲方的需求，我也在反思：『要怎麼去框實際的需求？』、『除了 A4 紙草率的紀錄外，什麼是好的文件？』\n\n使用 `PRD` 去 Google ，並經歷了一番挫折後，找到了一個比較看得順眼的[範本(kevinyien: PRD Template)](https://docs.google.com/document/d/1mEMDcHmtQ6twzNlpvF-9maNlAcezpWDtCnyIqWkODZs/edit?tab=t.0#heading=h.7ueoyja6ijay)：\n\n喜歡的原因是\n\n1. 簡明扼要\n2. 把團隊的角度考慮進去，例如：有沒有先跟利害關係人溝通\n3. 串接不同需求文件，例如：PRD、設計稿、問題集等等\n\n```plaintext\n# \\[專案名稱\\]\n\n## **\\[一行描述\\]**\n\n\n\\\n\n\\\n團隊：\\[Awesome\\]\n\n貢獻者：\\[專案經理\\]、\\[設計師\\]、\\[工程師\\]、\\[分析師\\]\n\n資源：\\[設計文件\\]、\\[分析數據\\]、\\[筆記\\]\n\n狀態：**草稿** / 問題審查 / 解決方案審查 / 上線審查 / 已上線\n\n最後更新日期：2020 年 5 月 21 日（星期四）\n\n\n---\n\n# 問題對齊\n\n| 請用 1-2 句話描述我們試圖解決的問題。我應該能夠單獨閱讀這部分，並向他人傳達該問題的價值與風險。這對我們的客戶和業務有何重要性？您有何證據或見解來支持這一點？ |\n|:---|\n\n## 高層次方法\n\n| 描述我們可能解決此問題的大致方向。我應該能夠模糊地看出大致方向。例如，如果問題是"新功能的可發現性"，那麼解決方案可能是"一個通知中心來顯示相關功能"。 |\n|:---|\n\n## 敘述\n\n| （可選）透過假設性故事描述客戶當前的使用情境，展示他們的現況。描述常見和極端的使用案例，以便在設計解決方案時加以考慮。 |\n|:---|\n\n## 目標\n\n\n1. *描述高層次目標，最好按優先順序排列，且不要太多。*\n2. *包括可衡量（指標）和不可衡量（感受）的目標*\n3. *保持簡明扼要*\n\n##\n\n## 非目標\n\n\n1. *列出我們不計劃解決的範圍*\n2. *說明這些範圍為何不在目標內*\n3. *這些非目標與目標一樣重要且具有明確性*\n\n| 🛑 若所有貢獻者尚未對問題達成共識，請勿繼續。🟢 完成以下表格，並獲得所有審閱者的"簽名"以繼續。 |\n|:---|\n\n| 審閱者 | 團隊/角色 | 狀態 |\n|:---|:---|:---|\n|    |    |    |\n|    |    |    |\n\n# 解決方案對齊\n\n| ✅ *劃定範圍* | 🚫 *不要強迫他人定義範圍* |\n|:---:|:---:|\n|    |    |\n\n## 核心功能\n\n正式方案\n\n\n1. *列出構成解決方案的核心功能*\n2. *最好按優先順序排列*\n3. *將其視為定義解決方案範圍的方式*\n4. *劃定界限，以便團隊可以專注於如何填補這些內容*\n5. *對於特別大的專案，請鏈接到詳細的子文件*\n6. *挑戰範圍，看看是否可以先獨立推出較小的部分*\n\n未來考量\n\n\n1. *可選擇性地列出未來可能考慮的功能*\n2. *這些可能影響當前的開發方式*\n\n## 核心流程\n\n| 展示客戶的端到端體驗。這可以是書面描述、流程圖、螢幕截圖或設計探索，具體表現形式將取決於專案和團隊。請勿獨自完成此部分，應與設計和工程團隊共同完成。此部分的內容會隨時間變得更具體，可能一開始只是幾個附註的截圖或故事，後續可能發展為具體的需求和驗收標準。請根據團隊的運作方式進行調整。如果設計師願意深入探索每個邊緣情境，就依賴他們；如果工程師希望詳細記錄每種情境，就深入描述驗收標準。這個部分會隨時間變化，這是正常的。當發生變更時，請在 [變更記錄]() 中記錄，並通知所有貢獻者。 |\n|:---|\n\n## 核心邏輯\n\n\n1. *列出指導設計和開發的規則*\n2. *處理常見情境和邊緣案例*\n3. *通常以文字描述這些邏輯比僅依賴設計來呈現每種變化更容易*\n\n| 🛑 若所有貢獻者尚未對問題達成共識，請勿繼續。🟢 完成以下表格，並獲得所有審閱者的"簽名"以繼續。 |\n|:---|\n\n| 審閱者 | 團隊/角色 | 狀態 |\n|:---|:---|:---|\n|    |    |    |\n|    |    |    |\n\n# 上線計劃\n\n| 定義將產品推向市場的各個階段，每個階段的目的，以及必須滿足的標準才能進入下一階段。強調可能影響時程或進度的風險和依賴關係（以及理想的應對計劃）。以下是示例階段表。 |\n|:---|\n\n## 主要里程碑\n\n| 目標日期 | 里程碑 | 描述 | 退出標準 |\n|:---|:---|:---|:---|\n| YYYY-MM-DD | ✅ 試點 | 僅限內部員工測試 | 連續 7 天無 P0 或 P1 級錯誤 |\n| YYYY-MM-DD | 🛑 測試版 | 20 名早期客戶 | 至少有 10 位客戶表示如果移除該功能會感到失望 |\n| YYYY-MM-DD | 🛑 早期使用 | 來自銷售團隊的邀請制客戶 | 在每個主要競爭對手中至少取得 1 項勝利 |\n| YYYY-MM-DD | 🛑 正式上線 | 所有當前市場的客戶 | 監測並衡量影響 |\n\n## 營運清單\n\n| 團隊 | 提示 | Y/N | 行動（若是） |\n|:---|:---|:---|:---|\n| 分析 | 是否需要額外的追蹤？ |    | 與 \\[負責人\\] 合作記錄數據 |\n| 銷售 | 是否需要銷售啟動資料？ |    | 與 \\[負責人\\] 合作 |\n| 行銷 | 是否影響共享 KPI？ |    | 與 \\[負責人\\] 合作調整目標 |\n\n# 附錄\n\n## 變更記錄 {#變更記錄}\n\n| 日期 | 描述 |\n|:---|:---|\n|    |    |\n|    |    |\n\n## 開放問題\n\n記錄開放問題及其解答。\n\n## 常見問題\n\n（可選）提供常見問題解答，幫助讀者快速理解專案要點。\n\n影響檢查清單\n\n* 權限\n* 報告\n* 定價\n* API\n* 全球化\n\n## 示例 PRD\n\n待補\n```\n\n### 2.1 流程圖：Mermaid、PlantUML\n\n> 前陣子讀書為了要解釋比較複雜的概念，常常需要畫流程圖，因此開始尋找適合的工具。不知道因為英語相較於亞洲人，更喜歡文字表達的關係，因此常常需要使用圖表來取代 AI 產生的文字。\n\n![流程圖](/img/blog/pic-2.png)\n\n### 2.2 Postman 文件\n\n> 這個算是前陣子才發現的技巧，在 Vibe Coding 完之後，可以告訴 Agent：『請幫我總結這次的 API 路徑開發，整理成 Postman 的客戶端使用範例，並提供成功、失敗的範本』\n\n1. 複製這個 JSON 內容\n2. 在 Postman 中點擊 "Import"\n3. 選擇 "Raw text" 並貼上 JSON\n4. 點擊 "Continue" 和 "Import"\n\n```json\n{\n  "info": {\n    "name": "用戶 API",\n    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"\n  },\n  "item": [\n    {\n      "name": "GET 用戶列表",\n      "request": {\n        "method": "GET",\n        "url": "{{base_url}}/users"\n      }\n    },\n    {\n      "name": "POST 創建用戶",\n      "request": {\n        "method": "POST",\n        "header": [\n          {\n            "key": "Content-Type",\n            "value": "application/json"\n          }\n        ],\n        "body": {\n          "mode": "raw",\n          "raw": "{\\n  \\"name\\": \\"張三\\",\\n  \\"email\\": \\"test@example.com\\"\\n}"\n        },\n        "url": "{{base_url}}/users"\n      }\n    },\n    {\n      "name": "GET 單一用戶",\n      "request": {\n        "method": "GET",\n        "url": "{{base_url}}/users/1"\n      }\n    },\n    {\n      "name": "PUT 更新用戶",\n      "request": {\n        "method": "PUT",\n        "header": [\n          {\n            "key": "Content-Type",\n            "value": "application/json"\n          }\n        ],\n        "body": {\n          "mode": "raw",\n          "raw": "{\\n  \\"name\\": \\"李四\\",\\n  \\"email\\": \\"updated@example.com\\"\\n}"\n        },\n        "url": "{{base_url}}/users/1"\n      }\n    },\n    {\n      "name": "DELETE 刪除用戶",\n      "request": {\n        "method": "DELETE",\n        "url": "{{base_url}}/users/1"\n      }\n    }\n  ],\n  "variable": [\n    {\n      "key": "base_url",\n      "value": "https://api.example.com"\n    }\n  ]\n}\n```\n\n~~終於不用追著後端要 Swagger 了~~\n\n直觀上也比 Swagger 好操作（儘管 Swagger 的目的不完全一樣，是為了讓後端的 API Spec 文件更完整）\n\n### 2.3 MCP Tool：Task Master Claude\n\n> 🔗 [Task Master Claude](https://github.com/eyaltoledano/claude-task-master)\n\n> 在前面已經初步擬定好 PRD 後，由於通常專案會有依賴性、先後順序，可以透過 MCP Tool 來分析和拆分任務，算是覺得這陣子最實用的 MCP Tool。\n\n```plaintext\n- Parse requirements: Can you parse my PRD at scripts/prd.txt?\n- Plan next step: What\'s the next task I should work on?\n- Implement a task: Can you help me implement task 3?\n- Expand a task: Can you help me expand task 4?\n```\n\n![Task Master](/img/blog/task-master-claude.png)\n\n## 3. 可以，但先讓我想想\n\n> 大概是半年前，曾經與其他廠商的工程師討論過，他覺得工程師最大的職責是劃定好邊界，還有告訴業主哪些可以做、哪些辦不到。\n\n其實 RD 跟很多人一樣，碰到特定的業務邏輯、或是沒學過的技術，還是要先花時間去研究 API 文件、相關的 GitHub Discussion，才知道特定功能實際上能不能實現，特別是初始的需求很模糊的時後。\n\n以自己來說，如果遇到地圖的需求，第一步會先對於需求做初步的訪談，試著抓出最基本的功能性需求：\n\n- 需要哪種地圖？離線地圖？\n- 有沒有需要特別的標記？\n- 靜態 or 時序型資料？\n- 2D or 3D？\n\n...\n\n![Research](/img/blog/deckgl-test.png)\n\n接著透過假資料，去測試一千台 3D 敞篷車在地圖上，來測試核心功能在最糟糕的狀態下會不會爆炸？或是試想其他沒有在畫面上的考量，例如：caniuse 的支援程度等。\n\n回顧 RD 的本質：應該要先 Research 然後再 Design，即便 AI Agent 盛行，終究 RD 是最後要負責的人。\n\n有點像是回到大二修『社會科學研究方法』的時候，很多問題真的沒有正確答案，需要先釐清假設，然後才去回答。\n\n## 4. 通靈師\n\n做過社會科學研究的大概都知道，最難處理問題的不是資料，而是『人』，這大概是百工百業不變的課題吧ＸＤ\n\n## 5. 學習\n\n回顧這半年，這些是自己覺得在冥冥之中幫助很大的課程：\n\n1. [【Frontend Master】Full Stack for Front-End Engineers](https://frontendmasters.com/courses/fullstack-v3/)\n\n> 對很多前端來說，由於 Vercel 等平台很方便，一建就部署完成，因此 Server 很像一個黑盒子。這個課程算是以前端的角度出發，去完整跑完 Server 架設的流程。\n\n2. [【書】《React 思維進化：一次打破常見的觀念誤解，躍升專業前端開發者》](https://www.tenlong.com.tw/products/9786263336841)\n\n> 這陣子發現不管是 React 或是 Kotlin，最核心的都是如何去設計資料流、畫面重繪（Reconciliation）的邏輯。\n\n3. [【書】《Beyond XSS：探索網頁前端資安宇宙》](https://www.tenlong.com.tw/products/9786267383803)\n\n> 老實說不是因為很實用，而是看過這本書所以知道像是 Worker API、 Backend For Frontend、 iframe 等之前比較少接觸的技術。遇到一些很瞎的需求，腦袋會有警鈴大響這個操作打破了瀏覽器規則。\n\n4. [【Youtube】How to Get Your Data Ready for AI Agents (Docs, PDFs, Websites)](https://www.youtube.com/watch?v=9lBTS5dM27c)\n\n> 面對 Agent 系列的產品，除了透過 ExplainThis 電子報、白皮書去補理論外，這一系列的影片算是比較入門怎麼清理資料的影片。\n\n## 6. 小結\n\n除了推 Git 外，很多時候還是很慶幸生活中的小確幸：\n\n![小確幸](/img/blog/70699.jpg)\n\n淡水老街、七星山、草嶺古道、和平島公園、西子灣、澎湖、九份 ...\n\n就像早期的工業革命，取代了生活中很多繁重的勞動，希望未來 AI Agent 也能替我們取代情緒勞動，讓我們有更多時間去投注更有意義的事情。',
    filePath: "src/content/blog/2025-06-11-2025-recap.md",
    digest: "ba92d8290762f05f",
    rendered: {
      html: '<p>對於擔任前端工程師，算是剛邁入一年的時間。因此想要藉由這個空檔，回顧一下上半年的學習和工作。</p>\n<!-- truncate -->\n<h2 id="目錄">目錄</h2>\n<ol>\n<li><a href="#1-%E6%8A%80%E8%A1%93%E6%A6%82%E8%A6%BD">技術概覽</a>\n<ul>\n<li>1.1 <a href="#11-%E5%89%8D%E7%AB%AF">前端</a></li>\n<li>1.2 <a href="#12-%E5%BE%8C%E7%AB%AF">後端</a></li>\n<li>1.3 <a href="#13-app">App</a></li>\n<li>1.4 <a href="#14-devops">DevOps</a></li>\n</ul>\n</li>\n<li><a href="#2-%E5%AF%AB%E5%A5%BD%E6%96%87%E4%BB%B6">寫好文件</a>\n<ul>\n<li>2.1 <a href="#21-%E6%B5%81%E7%A8%8B%E5%9C%96mermaidplantuml">流程圖：Mermaid、PlantUML</a></li>\n<li>2.2 <a href="#22-postman-%E6%96%87%E4%BB%B6">Postman 文件</a></li>\n<li>2.3 <a href="#23-mcp-tooltask-master-claude">MCP Tool：Task Master Claude</a></li>\n</ul>\n</li>\n<li><a href="#3-%E5%8F%AF%E4%BB%A5%E4%BD%86%E5%85%88%E8%AE%93%E6%88%91%E6%83%B3%E6%83%B3">可以，但先讓我想想</a></li>\n<li><a href="#4-%E9%80%9A%E9%9D%88%E5%B8%AB">通靈師</a></li>\n<li><a href="#5-%E5%AD%B8%E7%BF%92">學習</a></li>\n<li><a href="#6-%E5%B0%8F%E7%B5%90">小結</a></li>\n</ol>\n<h2 id="1-技術概覽">1. 技術概覽</h2>\n<h3 id="11-前端">1.1 前端</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>分類</th><th>說明</th></tr></thead><tbody><tr><td>Framework</td><td>Next.js, React + Vite, Astro</td></tr><tr><td>UI Framework</td><td>Tailwind CSS ,Radix UI, Shadcn UI ,Material UI</td></tr><tr><td>State Management</td><td>Redux, Zustand, Jotai, Tanstack Query, Context API</td></tr><tr><td>Headless CMS</td><td>Strapi</td></tr><tr><td>Map</td><td>DeckGL, MapLibre GL</td></tr><tr><td>Other</td><td>i18n-next, zod, Google Tag Manager, Web Recognization API</td></tr><tr><td>內部服務</td><td>Outline, Docusaurus</td></tr><tr><td>Testing</td><td>Playwright, Vitest</td></tr></tbody></table>\n<h3 id="12-後端">1.2 後端</h3>\n<blockquote>\n<p>有時候像是 Google Translate API 等 Token 適合藏在 Server，或是整個專案的業務邏輯 Google 不到，只有我會寫。因此在不考慮高併發的時候（要花點時間去規劃），會寫一些後端來給自己的前端串接，或是測試一些 MVP。</p>\n</blockquote>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>分類</th><th>說明</th></tr></thead><tbody><tr><td>Framework</td><td>Next.js (API Route), Express.js</td></tr><tr><td>ORM</td><td>Prisma, Drizzle ORM</td></tr><tr><td>API</td><td>REST, GraphQL, Swagger UI, WebSocket</td></tr><tr><td>Database Service</td><td>Neon, Supabase, PostgreSQL, MySQL Workbench</td></tr><tr><td>Map</td><td>TileServerGL</td></tr><tr><td>Other</td><td>zod, jwt, MCP Server, docling</td></tr></tbody></table>\n<h3 id="13-app">1.3 App</h3>\n<blockquote>\n<p>目前的主力還是放在 Web Frontend，不過前陣子因為要寫擴充套件的需求，開始學習一點 Kotlin，發現某些功能的寫法跟 React 很像。還有相較於 Web Vitals，Google Store 也有相對應的評分機制，這點也很有趣。</p>\n</blockquote>\n<blockquote>\n<p>🔗 <a href="https://frontendmasters.com/courses/android-kotlin/">Introduction to Kotlin and Android Development</a></p>\n</blockquote>\n<p><img src="/img/notes/kotlin/kotlin-compose-styling-example.png" alt="App"></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>分類</th><th>說明</th></tr></thead><tbody><tr><td>App</td><td>Kotlin, kotlin coroutine, Jetpack Compose</td></tr><tr><td>Other</td><td>Retrofit</td></tr></tbody></table>\n<h3 id="14-devops">1.4 DevOps</h3>\n<blockquote>\n<p>現在的公司，不知道是不是比較資深，每個工程師都會管自己的 VM，同時開發初期也需要自己寫 Dockerfile 或是管理 CI/CD 的流程，因此也花了一點時間學習如何處理環境的問題。不過好處是，有時候看到有趣的開源專案，可以很快的自己開一個 EC2 或是 Zeabur 下來玩。</p>\n</blockquote>\n<p><img src="/img/blog/zeabur-deploy.png" alt="DevOps"></p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>分類</th><th>說明</th></tr></thead><tbody><tr><td>CI/CD</td><td>Docker Compose, Gitlab CI</td></tr><tr><td>VM</td><td>Ubuntu, VIM</td></tr><tr><td>Proxy</td><td>Nginx Manager, Certbot</td></tr><tr><td>Cloud Service/Bucket</td><td>AWS(EC2, S3), Cloudflare R2, Digital Ocean, Minio</td></tr><tr><td>Domain</td><td>Namecheap</td></tr></tbody></table>\n<h2 id="2-寫好文件">2. 寫好文件</h2>\n<blockquote>\n<p>雖然很多人都說先決定公司，再跟著制度去學習，但就跟買菜一樣，很多事情是可遇不可求的，如果沒以這個環境怎麼辦？</p>\n</blockquote>\n<p>大概有好一陣子，團隊缺少專業的 PM，工程師要直接面對甲方的需求，我也在反思：『要怎麼去框實際的需求？』、『除了 A4 紙草率的紀錄外，什麼是好的文件？』</p>\n<p>使用 <code>PRD</code> 去 Google ，並經歷了一番挫折後，找到了一個比較看得順眼的<a href="https://docs.google.com/document/d/1mEMDcHmtQ6twzNlpvF-9maNlAcezpWDtCnyIqWkODZs/edit?tab=t.0#heading=h.7ueoyja6ijay">範本(kevinyien: PRD Template)</a>：</p>\n<p>喜歡的原因是</p>\n<ol>\n<li>簡明扼要</li>\n<li>把團隊的角度考慮進去，例如：有沒有先跟利害關係人溝通</li>\n<li>串接不同需求文件，例如：PRD、設計稿、問題集等等</li>\n</ol>\n<div class="expressive-code"><link rel="stylesheet" href="/assets/ec.v4551.css"><script type="module" src="/assets/ec.p1z7b.js"></script><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="plaintext"><code><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53"># \\[專案名稱\\]</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## **\\[一行描述\\]**</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">\\</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">\\</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">團隊：\\[Awesome\\]</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">貢獻者：\\[專案經理\\]、\\[設計師\\]、\\[工程師\\]、\\[分析師\\]</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">資源：\\[設計文件\\]、\\[分析數據\\]、\\[筆記\\]</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">狀態：**草稿** / 問題審查 / 解決方案審查 / 上線審查 / 已上線</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">最後更新日期：2020 年 5 月 21 日（星期四）</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">---</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53"># 問題對齊</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 請用 1-2 句話描述我們試圖解決的問題。我應該能夠單獨閱讀這部分，並向他人傳達該問題的價值與風險。這對我們的客戶和業務有何重要性？您有何證據或見解來支持這一點？ |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 高層次方法</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 描述我們可能解決此問題的大致方向。我應該能夠模糊地看出大致方向。例如，如果問題是"新功能的可發現性"，那麼解決方案可能是"一個通知中心來顯示相關功能"。 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 敘述</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| （可選）透過假設性故事描述客戶當前的使用情境，展示他們的現況。描述常見和極端的使用案例，以便在設計解決方案時加以考慮。 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 目標</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">1. *描述高層次目標，最好按優先順序排列，且不要太多。*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">2. *包括可衡量（指標）和不可衡量（感受）的目標*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">3. *保持簡明扼要*</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">##</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 非目標</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">1. *列出我們不計劃解決的範圍*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">2. *說明這些範圍為何不在目標內*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">3. *這些非目標與目標一樣重要且具有明確性*</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 🛑 若所有貢獻者尚未對問題達成共識，請勿繼續。🟢 完成以下表格，並獲得所有審閱者的"簽名"以繼續。 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 審閱者 | 團隊/角色 | 狀態 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|:---|:---|</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|    |    |    |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|    |    |    |</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53"># 解決方案對齊</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| ✅ *劃定範圍* | 🚫 *不要強迫他人定義範圍* |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---:|:---:|</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|    |    |</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 核心功能</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">正式方案</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">1. *列出構成解決方案的核心功能*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">2. *最好按優先順序排列*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">3. *將其視為定義解決方案範圍的方式*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">4. *劃定界限，以便團隊可以專注於如何填補這些內容*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">5. *對於特別大的專案，請鏈接到詳細的子文件*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">6. *挑戰範圍，看看是否可以先獨立推出較小的部分*</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">未來考量</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">1. *可選擇性地列出未來可能考慮的功能*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">2. *這些可能影響當前的開發方式*</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 核心流程</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 展示客戶的端到端體驗。這可以是書面描述、流程圖、螢幕截圖或設計探索，具體表現形式將取決於專案和團隊。請勿獨自完成此部分，應與設計和工程團隊共同完成。此部分的內容會隨時間變得更具體，可能一開始只是幾個附註的截圖或故事，後續可能發展為具體的需求和驗收標準。請根據團隊的運作方式進行調整。如果設計師願意深入探索每個邊緣情境，就依賴他們；如果工程師希望詳細記錄每種情境，就深入描述驗收標準。這個部分會隨時間變化，這是正常的。當發生變更時，請在 [變更記錄]() 中記錄，並通知所有貢獻者。 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 核心邏輯</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">1. *列出指導設計和開發的規則*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">2. *處理常見情境和邊緣案例*</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">3. *通常以文字描述這些邏輯比僅依賴設計來呈現每種變化更容易*</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 🛑 若所有貢獻者尚未對問題達成共識，請勿繼續。🟢 完成以下表格，並獲得所有審閱者的"簽名"以繼續。 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 審閱者 | 團隊/角色 | 狀態 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|:---|:---|</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|    |    |    |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|    |    |    |</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53"># 上線計劃</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 定義將產品推向市場的各個階段，每個階段的目的，以及必須滿足的標準才能進入下一階段。強調可能影響時程或進度的風險和依賴關係（以及理想的應對計劃）。以下是示例階段表。 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 主要里程碑</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 目標日期 | 里程碑 | 描述 | 退出標準 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|:---|:---|:---|</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| YYYY-MM-DD | ✅ 試點 | 僅限內部員工測試 | 連續 7 天無 P0 或 P1 級錯誤 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| YYYY-MM-DD | 🛑 測試版 | 20 名早期客戶 | 至少有 10 位客戶表示如果移除該功能會感到失望 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| YYYY-MM-DD | 🛑 早期使用 | 來自銷售團隊的邀請制客戶 | 在每個主要競爭對手中至少取得 1 項勝利 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| YYYY-MM-DD | 🛑 正式上線 | 所有當前市場的客戶 | 監測並衡量影響 |</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 營運清單</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 團隊 | 提示 | Y/N | 行動（若是） |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|:---|:---|:---|</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 分析 | 是否需要額外的追蹤？ |    | 與 \\[負責人\\] 合作記錄數據 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 銷售 | 是否需要銷售啟動資料？ |    | 與 \\[負責人\\] 合作 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 行銷 | 是否影響共享 KPI？ |    | 與 \\[負責人\\] 合作調整目標 |</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53"># 附錄</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 變更記錄 {#變更記錄}</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">| 日期 | 描述 |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|:---|:---|</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|    |    |</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">|    |    |</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 開放問題</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">記錄開放問題及其解答。</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 常見問題</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">（可選）提供常見問題解答，幫助讀者快速理解專案要點。</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">影響檢查清單</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">* 權限</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">* 報告</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">* 定價</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">* API</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">* 全球化</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">## 示例 PRD</span></div></div><div class="ec-line"><div class="code">\n</div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">待補</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="# \\[專案名稱\\]## **\\[一行描述\\]**\\\\團隊：\\[Awesome\\]貢獻者：\\[專案經理\\]、\\[設計師\\]、\\[工程師\\]、\\[分析師\\]資源：\\[設計文件\\]、\\[分析數據\\]、\\[筆記\\]狀態：**草稿** / 問題審查 / 解決方案審查 / 上線審查 / 已上線最後更新日期：2020 年 5 月 21 日（星期四）---# 問題對齊| 請用 1-2 句話描述我們試圖解決的問題。我應該能夠單獨閱讀這部分，並向他人傳達該問題的價值與風險。這對我們的客戶和業務有何重要性？您有何證據或見解來支持這一點？ ||:---|## 高層次方法| 描述我們可能解決此問題的大致方向。我應該能夠模糊地看出大致方向。例如，如果問題是&#x22;新功能的可發現性&#x22;，那麼解決方案可能是&#x22;一個通知中心來顯示相關功能&#x22;。 ||:---|## 敘述| （可選）透過假設性故事描述客戶當前的使用情境，展示他們的現況。描述常見和極端的使用案例，以便在設計解決方案時加以考慮。 ||:---|## 目標1. *描述高層次目標，最好按優先順序排列，且不要太多。*2. *包括可衡量（指標）和不可衡量（感受）的目標*3. *保持簡明扼要*#### 非目標1. *列出我們不計劃解決的範圍*2. *說明這些範圍為何不在目標內*3. *這些非目標與目標一樣重要且具有明確性*| 🛑 若所有貢獻者尚未對問題達成共識，請勿繼續。🟢 完成以下表格，並獲得所有審閱者的&#x22;簽名&#x22;以繼續。 ||:---|| 審閱者 | 團隊/角色 | 狀態 ||:---|:---|:---||    |    |    ||    |    |    |# 解決方案對齊| ✅ *劃定範圍* | 🚫 *不要強迫他人定義範圍* ||:---:|:---:||    |    |## 核心功能正式方案1. *列出構成解決方案的核心功能*2. *最好按優先順序排列*3. *將其視為定義解決方案範圍的方式*4. *劃定界限，以便團隊可以專注於如何填補這些內容*5. *對於特別大的專案，請鏈接到詳細的子文件*6. *挑戰範圍，看看是否可以先獨立推出較小的部分*未來考量1. *可選擇性地列出未來可能考慮的功能*2. *這些可能影響當前的開發方式*## 核心流程| 展示客戶的端到端體驗。這可以是書面描述、流程圖、螢幕截圖或設計探索，具體表現形式將取決於專案和團隊。請勿獨自完成此部分，應與設計和工程團隊共同完成。此部分的內容會隨時間變得更具體，可能一開始只是幾個附註的截圖或故事，後續可能發展為具體的需求和驗收標準。請根據團隊的運作方式進行調整。如果設計師願意深入探索每個邊緣情境，就依賴他們；如果工程師希望詳細記錄每種情境，就深入描述驗收標準。這個部分會隨時間變化，這是正常的。當發生變更時，請在 [變更記錄]() 中記錄，並通知所有貢獻者。 ||:---|## 核心邏輯1. *列出指導設計和開發的規則*2. *處理常見情境和邊緣案例*3. *通常以文字描述這些邏輯比僅依賴設計來呈現每種變化更容易*| 🛑 若所有貢獻者尚未對問題達成共識，請勿繼續。🟢 完成以下表格，並獲得所有審閱者的&#x22;簽名&#x22;以繼續。 ||:---|| 審閱者 | 團隊/角色 | 狀態 ||:---|:---|:---||    |    |    ||    |    |    |# 上線計劃| 定義將產品推向市場的各個階段，每個階段的目的，以及必須滿足的標準才能進入下一階段。強調可能影響時程或進度的風險和依賴關係（以及理想的應對計劃）。以下是示例階段表。 ||:---|## 主要里程碑| 目標日期 | 里程碑 | 描述 | 退出標準 ||:---|:---|:---|:---|| YYYY-MM-DD | ✅ 試點 | 僅限內部員工測試 | 連續 7 天無 P0 或 P1 級錯誤 || YYYY-MM-DD | 🛑 測試版 | 20 名早期客戶 | 至少有 10 位客戶表示如果移除該功能會感到失望 || YYYY-MM-DD | 🛑 早期使用 | 來自銷售團隊的邀請制客戶 | 在每個主要競爭對手中至少取得 1 項勝利 || YYYY-MM-DD | 🛑 正式上線 | 所有當前市場的客戶 | 監測並衡量影響 |## 營運清單| 團隊 | 提示 | Y/N | 行動（若是） ||:---|:---|:---|:---|| 分析 | 是否需要額外的追蹤？ |    | 與 \\[負責人\\] 合作記錄數據 || 銷售 | 是否需要銷售啟動資料？ |    | 與 \\[負責人\\] 合作 || 行銷 | 是否影響共享 KPI？ |    | 與 \\[負責人\\] 合作調整目標 |# 附錄## 變更記錄 {#變更記錄}| 日期 | 描述 ||:---|:---||    |    ||    |    |## 開放問題記錄開放問題及其解答。## 常見問題（可選）提供常見問題解答，幫助讀者快速理解專案要點。影響檢查清單* 權限* 報告* 定價* API* 全球化## 示例 PRD待補"><div></div></button></div></figure></div>\n<h3 id="21-流程圖mermaidplantuml">2.1 流程圖：Mermaid、PlantUML</h3>\n<blockquote>\n<p>前陣子讀書為了要解釋比較複雜的概念，常常需要畫流程圖，因此開始尋找適合的工具。不知道因為英語相較於亞洲人，更喜歡文字表達的關係，因此常常需要使用圖表來取代 AI 產生的文字。</p>\n</blockquote>\n<p><img src="/img/blog/pic-2.png" alt="流程圖"></p>\n<h3 id="22-postman-文件">2.2 Postman 文件</h3>\n<blockquote>\n<p>這個算是前陣子才發現的技巧，在 Vibe Coding 完之後，可以告訴 Agent：『請幫我總結這次的 API 路徑開發，整理成 Postman 的客戶端使用範例，並提供成功、失敗的範本』</p>\n</blockquote>\n<ol>\n<li>複製這個 JSON 內容</li>\n<li>在 Postman 中點擊 "Import"</li>\n<li>選擇 "Raw text" 並貼上 JSON</li>\n<li>點擊 "Continue" 和 "Import"</li>\n</ol>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="json"><code><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">  </span><span style="--0:#7FDBCA;--1:#096E72">"info"</span><span style="--0:#D6DEEB;--1:#403F53">: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#7FDBCA;--1:#096E72">"name"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">用戶 API</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">    </span><span style="--0:#7FDBCA;--1:#096E72">"schema"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">https://schema.getpostman.com/json/collection/v2.1.0/collection.json</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div class="ec-line"><div class="code"><span class="indent">  </span><span style="--0:#7FDBCA;--1:#096E72">"item"</span><span style="--0:#D6DEEB;--1:#403F53">: [</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"name"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">GET 用戶列表</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"request"</span><span style="--0:#D6DEEB;--1:#403F53">: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"method"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">GET</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"url"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">{{base_url}}/users</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">      </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"name"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">POST 創建用戶</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"request"</span><span style="--0:#D6DEEB;--1:#403F53">: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"method"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">POST</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"header"</span><span style="--0:#D6DEEB;--1:#403F53">: [</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">          </span></span><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#7FDBCA;--1:#096E72">"key"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">Content-Type</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#7FDBCA;--1:#096E72">"value"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">application/json</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">          </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">],</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"body"</span><span style="--0:#D6DEEB;--1:#403F53">: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">          </span><span style="--0:#7FDBCA;--1:#096E72">"mode"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">raw</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">          </span><span style="--0:#7FDBCA;--1:#096E72">"raw"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">{</span><span style="--0:#F78C6C;--1:#AA0982">\\n</span><span style="--0:#C789D6;--1:#7C5686">  </span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">name</span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">: </span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">張三</span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">,</span><span style="--0:#F78C6C;--1:#AA0982">\\n</span><span style="--0:#C789D6;--1:#7C5686">  </span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">email</span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">: </span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">test@example.com</span><span style="--0:#F78C6C;--1:#AA0982">\\"\\n</span><span style="--0:#C789D6;--1:#7C5686">}</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"url"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">{{base_url}}/users</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">      </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"name"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">GET 單一用戶</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"request"</span><span style="--0:#D6DEEB;--1:#403F53">: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"method"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">GET</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"url"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">{{base_url}}/users/1</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">      </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"name"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">PUT 更新用戶</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"request"</span><span style="--0:#D6DEEB;--1:#403F53">: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"method"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">PUT</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"header"</span><span style="--0:#D6DEEB;--1:#403F53">: [</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">          </span></span><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#7FDBCA;--1:#096E72">"key"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">Content-Type</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">            </span><span style="--0:#7FDBCA;--1:#096E72">"value"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">application/json</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">          </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">],</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"body"</span><span style="--0:#D6DEEB;--1:#403F53">: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">          </span><span style="--0:#7FDBCA;--1:#096E72">"mode"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">raw</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">          </span><span style="--0:#7FDBCA;--1:#096E72">"raw"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">{</span><span style="--0:#F78C6C;--1:#AA0982">\\n</span><span style="--0:#C789D6;--1:#7C5686">  </span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">name</span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">: </span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">李四</span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">,</span><span style="--0:#F78C6C;--1:#AA0982">\\n</span><span style="--0:#C789D6;--1:#7C5686">  </span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">email</span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">: </span><span style="--0:#F78C6C;--1:#AA0982">\\"</span><span style="--0:#C789D6;--1:#7C5686">updated@example.com</span><span style="--0:#F78C6C;--1:#AA0982">\\"\\n</span><span style="--0:#C789D6;--1:#7C5686">}</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">        </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"url"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">{{base_url}}/users/1</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">      </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">},</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"name"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">DELETE 刪除用戶</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"request"</span><span style="--0:#D6DEEB;--1:#403F53">: {</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"method"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">DELETE</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">        </span><span style="--0:#7FDBCA;--1:#096E72">"url"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">{{base_url}}/users/1</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">      </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">],</span></div></div><div class="ec-line"><div class="code"><span class="indent">  </span><span style="--0:#7FDBCA;--1:#096E72">"variable"</span><span style="--0:#D6DEEB;--1:#403F53">: [</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">{</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"key"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">base_url</span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#D6DEEB;--1:#403F53">,</span></div></div><div class="ec-line"><div class="code"><span class="indent">      </span><span style="--0:#7FDBCA;--1:#096E72">"value"</span><span style="--0:#D6DEEB;--1:#403F53">: </span><span style="--0:#D9F5DD;--1:#111111">"</span><span style="--0:#C789D6;--1:#7C5686">https://api.example.com</span><span style="--0:#D9F5DD;--1:#111111">"</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">    </span></span><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div><div class="ec-line"><div class="code"><span class="indent"><span style="--0:#D6DEEB;--1:#403F53">  </span></span><span style="--0:#D6DEEB;--1:#403F53">]</span></div></div><div class="ec-line"><div class="code"><span style="--0:#D6DEEB;--1:#403F53">}</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="{  &#x22;info&#x22;: {    &#x22;name&#x22;: &#x22;用戶 API&#x22;,    &#x22;schema&#x22;: &#x22;https://schema.getpostman.com/json/collection/v2.1.0/collection.json&#x22;  },  &#x22;item&#x22;: [    {      &#x22;name&#x22;: &#x22;GET 用戶列表&#x22;,      &#x22;request&#x22;: {        &#x22;method&#x22;: &#x22;GET&#x22;,        &#x22;url&#x22;: &#x22;{{base_url}}/users&#x22;      }    },    {      &#x22;name&#x22;: &#x22;POST 創建用戶&#x22;,      &#x22;request&#x22;: {        &#x22;method&#x22;: &#x22;POST&#x22;,        &#x22;header&#x22;: [          {            &#x22;key&#x22;: &#x22;Content-Type&#x22;,            &#x22;value&#x22;: &#x22;application/json&#x22;          }        ],        &#x22;body&#x22;: {          &#x22;mode&#x22;: &#x22;raw&#x22;,          &#x22;raw&#x22;: &#x22;{\\n  \\&#x22;name\\&#x22;: \\&#x22;張三\\&#x22;,\\n  \\&#x22;email\\&#x22;: \\&#x22;test@example.com\\&#x22;\\n}&#x22;        },        &#x22;url&#x22;: &#x22;{{base_url}}/users&#x22;      }    },    {      &#x22;name&#x22;: &#x22;GET 單一用戶&#x22;,      &#x22;request&#x22;: {        &#x22;method&#x22;: &#x22;GET&#x22;,        &#x22;url&#x22;: &#x22;{{base_url}}/users/1&#x22;      }    },    {      &#x22;name&#x22;: &#x22;PUT 更新用戶&#x22;,      &#x22;request&#x22;: {        &#x22;method&#x22;: &#x22;PUT&#x22;,        &#x22;header&#x22;: [          {            &#x22;key&#x22;: &#x22;Content-Type&#x22;,            &#x22;value&#x22;: &#x22;application/json&#x22;          }        ],        &#x22;body&#x22;: {          &#x22;mode&#x22;: &#x22;raw&#x22;,          &#x22;raw&#x22;: &#x22;{\\n  \\&#x22;name\\&#x22;: \\&#x22;李四\\&#x22;,\\n  \\&#x22;email\\&#x22;: \\&#x22;updated@example.com\\&#x22;\\n}&#x22;        },        &#x22;url&#x22;: &#x22;{{base_url}}/users/1&#x22;      }    },    {      &#x22;name&#x22;: &#x22;DELETE 刪除用戶&#x22;,      &#x22;request&#x22;: {        &#x22;method&#x22;: &#x22;DELETE&#x22;,        &#x22;url&#x22;: &#x22;{{base_url}}/users/1&#x22;      }    }  ],  &#x22;variable&#x22;: [    {      &#x22;key&#x22;: &#x22;base_url&#x22;,      &#x22;value&#x22;: &#x22;https://api.example.com&#x22;    }  ]}"><div></div></button></div></figure></div>\n<p><del>終於不用追著後端要 Swagger 了</del></p>\n<p>直觀上也比 Swagger 好操作（儘管 Swagger 的目的不完全一樣，是為了讓後端的 API Spec 文件更完整）</p>\n<h3 id="23-mcp-tooltask-master-claude">2.3 MCP Tool：Task Master Claude</h3>\n<blockquote>\n<p>🔗 <a href="https://github.com/eyaltoledano/claude-task-master">Task Master Claude</a></p>\n</blockquote>\n<blockquote>\n<p>在前面已經初步擬定好 PRD 後，由於通常專案會有依賴性、先後順序，可以透過 MCP Tool 來分析和拆分任務，算是覺得這陣子最實用的 MCP Tool。</p>\n</blockquote>\n<div class="expressive-code"><figure class="frame not-content"><figcaption class="header"></figcaption><pre data-language="plaintext"><code><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">- Parse requirements: Can you parse my PRD at scripts/prd.txt?</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">- Plan next step: What\'s the next task I should work on?</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">- Implement a task: Can you help me implement task 3?</span></div></div><div class="ec-line"><div class="code"><span style="--0:#d6deeb;--1:#403f53">- Expand a task: Can you help me expand task 4?</span></div></div></code></pre><div class="copy"><button title="Copy to clipboard" data-copied="Copied!" data-code="- Parse requirements: Can you parse my PRD at scripts/prd.txt?- Plan next step: What&#x27;s the next task I should work on?- Implement a task: Can you help me implement task 3?- Expand a task: Can you help me expand task 4?"><div></div></button></div></figure></div>\n<p><img src="/img/blog/task-master-claude.png" alt="Task Master"></p>\n<h2 id="3-可以但先讓我想想">3. 可以，但先讓我想想</h2>\n<blockquote>\n<p>大概是半年前，曾經與其他廠商的工程師討論過，他覺得工程師最大的職責是劃定好邊界，還有告訴業主哪些可以做、哪些辦不到。</p>\n</blockquote>\n<p>其實 RD 跟很多人一樣，碰到特定的業務邏輯、或是沒學過的技術，還是要先花時間去研究 API 文件、相關的 GitHub Discussion，才知道特定功能實際上能不能實現，特別是初始的需求很模糊的時後。</p>\n<p>以自己來說，如果遇到地圖的需求，第一步會先對於需求做初步的訪談，試著抓出最基本的功能性需求：</p>\n<ul>\n<li>需要哪種地圖？離線地圖？</li>\n<li>有沒有需要特別的標記？</li>\n<li>靜態 or 時序型資料？</li>\n<li>2D or 3D？</li>\n</ul>\n<p>…</p>\n<p><img src="/img/blog/deckgl-test.png" alt="Research"></p>\n<p>接著透過假資料，去測試一千台 3D 敞篷車在地圖上，來測試核心功能在最糟糕的狀態下會不會爆炸？或是試想其他沒有在畫面上的考量，例如：caniuse 的支援程度等。</p>\n<p>回顧 RD 的本質：應該要先 Research 然後再 Design，即便 AI Agent 盛行，終究 RD 是最後要負責的人。</p>\n<p>有點像是回到大二修『社會科學研究方法』的時候，很多問題真的沒有正確答案，需要先釐清假設，然後才去回答。</p>\n<h2 id="4-通靈師">4. 通靈師</h2>\n<p>做過社會科學研究的大概都知道，最難處理問題的不是資料，而是『人』，這大概是百工百業不變的課題吧ＸＤ</p>\n<h2 id="5-學習">5. 學習</h2>\n<p>回顧這半年，這些是自己覺得在冥冥之中幫助很大的課程：</p>\n<ol>\n<li><a href="https://frontendmasters.com/courses/fullstack-v3/">【Frontend Master】Full Stack for Front-End Engineers</a></li>\n</ol>\n<blockquote>\n<p>對很多前端來說，由於 Vercel 等平台很方便，一建就部署完成，因此 Server 很像一個黑盒子。這個課程算是以前端的角度出發，去完整跑完 Server 架設的流程。</p>\n</blockquote>\n<ol start="2">\n<li><a href="https://www.tenlong.com.tw/products/9786263336841">【書】《React 思維進化：一次打破常見的觀念誤解，躍升專業前端開發者》</a></li>\n</ol>\n<blockquote>\n<p>這陣子發現不管是 React 或是 Kotlin，最核心的都是如何去設計資料流、畫面重繪（Reconciliation）的邏輯。</p>\n</blockquote>\n<ol start="3">\n<li><a href="https://www.tenlong.com.tw/products/9786267383803">【書】《Beyond XSS：探索網頁前端資安宇宙》</a></li>\n</ol>\n<blockquote>\n<p>老實說不是因為很實用，而是看過這本書所以知道像是 Worker API、 Backend For Frontend、 iframe 等之前比較少接觸的技術。遇到一些很瞎的需求，腦袋會有警鈴大響這個操作打破了瀏覽器規則。</p>\n</blockquote>\n<ol start="4">\n<li><a href="https://www.youtube.com/watch?v=9lBTS5dM27c">【Youtube】How to Get Your Data Ready for AI Agents (Docs, PDFs, Websites)</a></li>\n</ol>\n<blockquote>\n<p>面對 Agent 系列的產品，除了透過 ExplainThis 電子報、白皮書去補理論外，這一系列的影片算是比較入門怎麼清理資料的影片。</p>\n</blockquote>\n<h2 id="6-小結">6. 小結</h2>\n<p>除了推 Git 外，很多時候還是很慶幸生活中的小確幸：</p>\n<p><img src="/img/blog/70699.jpg" alt="小確幸"></p>\n<p>淡水老街、七星山、草嶺古道、和平島公園、西子灣、澎湖、九份 …</p>\n<p>就像早期的工業革命，取代了生活中很多繁重的勞動，希望未來 AI Agent 也能替我們取代情緒勞動，讓我們有更多時間去投注更有意義的事情。</p>',
      metadata: {
        headings: [
          {
            depth: 2,
            slug: "目錄",
            text: "目錄",
          },
          {
            depth: 2,
            slug: "1-技術概覽",
            text: "1. 技術概覽",
          },
          {
            depth: 3,
            slug: "11-前端",
            text: "1.1 前端",
          },
          {
            depth: 3,
            slug: "12-後端",
            text: "1.2 後端",
          },
          {
            depth: 3,
            slug: "13-app",
            text: "1.3 App",
          },
          {
            depth: 3,
            slug: "14-devops",
            text: "1.4 DevOps",
          },
          {
            depth: 2,
            slug: "2-寫好文件",
            text: "2. 寫好文件",
          },
          {
            depth: 3,
            slug: "21-流程圖mermaidplantuml",
            text: "2.1 流程圖：Mermaid、PlantUML",
          },
          {
            depth: 3,
            slug: "22-postman-文件",
            text: "2.2 Postman 文件",
          },
          {
            depth: 3,
            slug: "23-mcp-tooltask-master-claude",
            text: "2.3 MCP Tool：Task Master Claude",
          },
          {
            depth: 2,
            slug: "3-可以但先讓我想想",
            text: "3. 可以，但先讓我想想",
          },
          {
            depth: 2,
            slug: "4-通靈師",
            text: "4. 通靈師",
          },
          {
            depth: 2,
            slug: "5-學習",
            text: "5. 學習",
          },
          {
            depth: 2,
            slug: "6-小結",
            text: "6. 小結",
          },
        ],
        localImagePaths: [],
        remoteImagePaths: [],
        frontmatter: {
          slug: "2025-recap",
          title: "【週間札記】2025 上半年回顧",
        },
        imagePaths: [],
      },
    },
    collection: "blog",
    slug: "2025-recap",
  },
];
