---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---
- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules

- **Always check the result in the browser or via tests before confirming and committing changes to git.**
  - This ensures that your changes work as expected and prevents broken code from being committed.
  - For UI changes, preview in the browser and verify all affected components.
  - For backend or logic changes, run all relevant tests.
  - Only proceed with `git commit` after successful verification.

- **All git commit messages must follow the Conventional Commits specification.**
  - Example: `feat(layout): add dark mode toggle to header`
  - See https://www.conventionalcommits.org/en/v1.0.0/ for full details.

---
- **在確認並提交（commit）到 git 之前，務必先在瀏覽器或測試中檢查結果。**
  - 這可確保你的變更如預期運作，避免提交有問題的程式碼。
  - UI 變更請務必在瀏覽器預覽並檢查所有受影響元件。
  - 後端或邏輯變更請執行所有相關測試。
  - 僅在驗證無誤後才進行 `git commit`。

- **所有 git commit 訊息必須遵循 Conventional Commits 規範。**
  - 範例：`feat(layout): add dark mode toggle to header`
  - 詳細規範請參考 https://www.conventionalcommits.org/zh-hant/v1.0.0/ 